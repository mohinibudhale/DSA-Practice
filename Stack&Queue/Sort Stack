public class Main {
   public static <T extends Comparable<T>> void sortStack(Stack<T> stack) {
        Stack<T> sortedStack = new Stack<>();

        while (!stack.isEmpty()) {
           
            T current = stack.pop();

            while (!sortedStack.isEmpty() && sortedStack.peek().compareTo(current) > 0) {
                stack.push(sortedStack.pop());
            }
            sortedStack.push(current);
        }

        while (!sortedStack.isEmpty()) {
            stack.push(sortedStack.pop());
        }
    }


    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(3);
        stack.push(1);
        stack.push(4);
        stack.push(2);

        System.out.println("Before sorting:");
        stack.printStack();

        sortStack(stack);

        System.out.println("\nAfter sorting:");
        stack.printStack();
 
        /*
            EXPECTED OUTPUT:
            ----------------
            Before sorting:
            4
            1
            5
            2
            3
            
            After sorting:
            1
            2
            3
            4
            5

        */
        
    }
    
}

